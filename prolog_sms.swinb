<div class="notebook">

<div class="nb-cell program" data-background="true" data-singleline="true" name="p2">
:-include("my_lib.pl").

</div>

<div class="nb-cell program" data-background="true" data-below="true" name="p1">
%well it looks like you worked it out.
% can download factbases or data......
</div>

<div class="nb-cell program" data-background="true" data-below="true" name="p1">
%%fact base
a(1).
a(2).
a(3).
b(1).
b(2).

write_list([]).
write_list([H|T]):-
        write(H),
    write_list(T).

%roster_line([gm,c,p,o,c,a,u,u]).
%roster_line([db,a,p,o,a,z,z,z]).
%roster_line([cc,p,o,a,a,a,o,ao]).


roster_line([gm,c,p,o,c,z,z,z,c,p,o,c,z,z,z,c,p,o,c,z,z,z,c,p,o,c,z,z,z,c,p,o,c,z,z,z,c,p,o,c,z,z,z,c,p,o,c,z,z,z,c,p,o,c,z,z,z,c,p,o,c,z,z,z,c,p,o,c,z,z,z]).
roster_line([db,c,c,c,c,z,z,z,c,c,c,o,z,z,z,c,c,c,p,z,z,z,c,c,c,o,z,z,z,c,c,c,p,z,z,z,c,c,c,p,z,z,z,c,c,c,p,z,z,z,al,al,al,al,o,o,o,c,c,c,p,z,z,z,c,c,c,p,z,z,z]).
roster_line([cc,a,p,o,a,z,z,z,a,a,o,a,z,z,z,a,p,o,a,z,z,z,a,p,o,a,z,z,z,a,a,o,a,z,z,z,a,p,o,a,z,z,z,a,p,o,a,z,z,z,a,p,o,cl,cl,o,o,cl,cl,cl,cl,o,o,o,cl,cl,o,o,z,z,z]).
roster_line([mc,o,o,p,c,z,z,z,o,o,p,c,z,z,z,a,phnw,p,c,z,z,z,o,o,p,c,z,z,z,a,a,p,c,z,z,z,al,al,al,al,o,o,o,o,a,a,c,z,z,z,o,a,o,c,z,z,z,o,a,p,c,z,z,z,o,a,p,c,z,z,z]).
roster_line([sd,o,c,i,o,z,z,z,c,s,o,p,z,z,z,s,phnw,o,al,z,z,z,p,c,al,al,z,z,z,c,c,c,p,z,z,z,c,c,c,o,z,z,z,c,c,c,p,z,z,z,c,c,c,p,z,z,z,a,c,i,p,z,z,z,a,c,a,p,z,z,z]).
roster_line([ml,o,o,al,a,z,z,z,o,o,al,a,z,z,z,o,o,al,s,z,z,z,o,o,al,a,z,z,z,o,o,s,a,z,z,z,o,o,a,a,z,z,z,o,o,a,a,z,z,z,o,o,a,s,z,z,z,o,o,al,a,z,z,z,o,o,a,a,z,z,z]).
roster_line([hl,a,i,c,p,z,z,z,al,al,al,al,z,z,z,al,al,al,p,z,z,z,o,o,c,p,z,z,z,s,i,c,p,z,z,z,sab,sab,sab,sab,z,z,z,sab,sab,sab,sab,z,z,z,sab,sab,sab,sab,z,z,z,sab,sab,sab,sab,z,z,z,sab,sab,sab,sab,z,z,z]).
roster_line([dl,c,p,c,o,z,z,z,c,p,c,o,z,z,z,phnw,p,c,c,z,z,z,al,al,al,al,z,z,z,o,o,c,i,z,z,z,a,a,c,o,z,z,z,al,al,al,al,z,z,z,o,p,c,o,z,z,z,s,p,c,o,z,z,z,o,p,c,o,z,z,z]).
roster_line([rm,s,p,c,o,z,z,z,al,al,al,al,z,z,z,o,o,c,a,z,z,z,s,p,c,o,z,z,z,o,a,c,o,z,z,z,o,p,c,i,z,z,z,a,p,c,s,z,z,z,al,al,al,al,z,z,z,al,al,al,al,z,z,z,o,p,c,o,z,z,z]).
roster_line([gn,p,o,p,c,z,z,z,p,o,p,c,z,z,z,p,o,p,c,z,z,z,p,o,p,c,z,z,z,p,o,p,c,z,z,z,p,o,p,c,z,z,z,p,o,p,c,z,z,z,p,o,p,c,z,z,z,p,o,p,c,z,z,z,p,o,p,c,z,z,z]).


whole_roster_rule(gm,oc,0,0, s,0,4, i,0,0, no_consec,1, no_split,0,fri_pm,0,0,sat_am,0,0,sat_pm,0,0,sun_am,0,0,sun_pm,0,0).
whole_roster_rule(db,oc,0,6, s,0,2, i,0,6, no_consec,1, no_split,0,fri_pm,2,2,sat_am,1,1,sat_pm,1,1,sun_am,1,1,sun_pm,1,1).
whole_roster_rule(cc,oc,0,6, s,0,7, i,0,7, no_consec,1, no_split,0,fri_pm,2,2,sat_am,1,1,sat_pm,1,1,sun_am,1,1,sun_pm,1,1).

%             fp   sata  satp  suna  sunp
constants(gm,0,0,  0,0,  0,0,  3,4,  0,0, no_split-0, no_consec-1,  no_fri_pm_before_sat-0).
constants(db,2,2,  1,1,  1,1,  1,1,  1,1, no_split-1, no_consec-1,  no_fri_pm_before_sat-1).
constants(cc,2,2,  1,1,  1,1,  1,1,  1,1, no_split-1, no_consec-1,  no_fri_pm_before_sat-1).
constants(mc,2,2,  1,1,  1,1,  1,1,  1,1, no_split-1, no_consec-0,  no_fri_pm_before_sat-1).
constants(sd,2,2,  1,1,  1,1,  1,1,  1,1, no_split-1, no_consec-1,  no_fri_pm_before_sat-1).
constants(ml,0,0,  0,0,  0,0,  1,5,  1,5, no_split-0, no_consec-0,  no_fri_pm_before_sat-0).
constants(hl,2,2,  0,2,  0,2,  0,2,  0,2, no_split-1, no_consec-1,  no_fri_pm_before_sat-1).
constants(dl,2,2,  1,1,  1,1,  1,1,  1,1, no_split-1, no_consec-1,  no_fri_pm_before_sat-1).
constants(rm,2,2,  1,1,  1,1,  1,1,  1,1, no_split-1, no_consec-1,  no_fri_pm_before_sat-1).
constants(gn,0,0,  0,0,  1,10, 0,0,  0,0, no_split-0, no_consec-0,  no_fri_pm_before_sat-0).

</div>

<div class="nb-cell program" data-background="true" data-below="true" data-singleline="true" name="p3">
%DOCS %ENUMS
docs(DOCS):-
  findall(D,roster_line([D|_]),DOCS).

enum(DOCS,ENUM):-
  maplist(upcase_atom,DOCS,DD),
  atomics_to_string(DD,",",DDD),
  ENUM = ["enum docs = {",DDD,"};\n"].
  
</div>

<div class="nb-cell program" data-background="true" data-below="true" data-singleline="true" name="p5">
%%build minzinc staff constraints
to_minizinc(RESULT):-
    findall(R,roster_line(R),RR), %%creates nested lists
    roster_lines_to_roster(RR,RRR),
    roster_to_minizinc(RRR,RESULT).


% roster_lines_to_roster([[gm,a,b],[db,p,o]],R)   --&gt; [[roster[gm,1,a],roster[gm,2,b]]...
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
roster_lines_to_roster(R,RR):-
    process_lines(R,RR).

process_lines([],[]).
process_lines([[DOC|SHIFTS]|RESTROSTER],[R|RESULT]):-
    process_line([DOC|SHIFTS],R),
    process_lines(RESTROSTER,RESULT).

process_line([DOC | SHIFTS], R4) :-
    length(SHIFTS, N),
    numlist(1, N, DAYS),
    maplist(create_roster_item(DOC), DAYS, SHIFTS, R4).

create_roster_item(DOC, DAY, SHIFT, roster(DOC, DAY, SHIFT)).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

roster_to_minizinc(LIST_OF_ROSTER_ITEMS,RESULT):-
    maplist(roster_to_minizinc,LIST_OF_ROSTER_ITEMS,RESULT).

roster_to_minizinc(roster(DOC,DAY,SHIFT),MINIZINC):-
    (switch_shifts(DOC,DAY,SHIFT,MINIZINC)  -&gt;true ; 
 										(   writeln("failed shifts"),
     										write(DOC),
     										write(DAY),write(SHIFT))).


switch_shifts(DOC,DAY,SHIFT,RESULT):-
    valid_shifts(VALID_SHIFTS),  %% data below.....
    memberchk(SHIFT,VALID_SHIFTS), %% only returns true/false ie not a generator
    upcase_atom(DOC,UPDOC),
    format(atom(RESULT),"constraint roster[~w,~w] = ~w;\n",[UPDOC,DAY,SHIFT]).

switch_shifts(DOC,DAY,SHIFT,RESULT):-
    atom_chars(SHIFT,[x,S1]),
    upcase_atom(DOC,UPDOC),
    format(atom(RESULT),"constraint roster[~w,~w] != ~w;\n",[UPDOC,DAY,S1]).

switch_shifts(DOC,DAY,SHIFT,RESULT):-
    atom_chars(SHIFT,[u]),
    upcase_atom(DOC,UPDOC),
    format(atom(RESULT),"constraint roster[~w,~w] = o;\n",[UPDOC,DAY]).

switch_shifts(DOC,DAY,SHIFT,RESULT):-
    atom_chars(SHIFT,[S1,S2]),
    upcase_atom(DOC,UPDOC),
    format(atom(RESULT),"constraint roster[~w,~w] = ~w \\/ roster[~w,~w] = ~w;\n",[UPDOC,DAY,S1,UPDOC,DAY,S2]).

switch_shifts(DOC,DAY,SHIFT,RESULT):-
    atom_chars(SHIFT,[S1,S2,S3]), 
    upcase_atom(DOC,UPDOC),
    format(atom(RESULT),"constraint roster[~w,~w] = ~w \\/ roster[~w,~w] = ~w \\/ roster[~w,~w] = ~w;\n",[UPDOC,DAY,S1,UPDOC,DAY,S2,UPDOC,DAY,S3]).

switch_shifts(DOC,DAY,SHIFT,RESULT):-
    atom_chars(SHIFT,[z]), 
    upcase_atom(DOC,UPDOC),
    format(atom(RESULT),"constraint roster[~w,~w] = ~w \\/ roster[~w,~w] = ~w \\/ roster[~w,~w] = ~w;\n",[UPDOC,DAY,a,UPDOC,DAY,p,UPDOC,DAY,o]).

valid_shifts([a,p,l,c,s,o,i,lsl,cl,sab,phnw,al,mat,pat]).



</div>

<div class="nb-cell query" name="q2">
to_minizinc(R),flatten(R,RR),maplist(writeln,RR).
</div>

<div class="nb-cell program" data-background="true" data-below="true" data-singleline="true" name="p4">
%%whole_roster_rule
constants([],[]).
constants([DOC|DOCS],[RR|RESULT]):-
  whole_roster_rule(DOC,oc,OCLO,OCHI,s,SSULO,SSUHI,i,ICLO,ICHI,no_consec,NOCONSECFLAG,no_split,NOSPLITFLAG,fri_pm,FPLO,FPHI,sat_am,SATAMLO,SATAMHI,sat_pm,SATPMLO,SATPMHI,sun_am,SUNAMLO,SUNAMHI,sun_pm,SUNPMLO,SUNPMHI),
  upcase_atom(DOC,UPDOC),
  write("testing- "),write(DOC),nl,
  SSU = ["constraint global_cardinality_low_up(     ssu[",UPDOC,",..],[1],[" ,SSULO , "],[" , SSUHI , "]);\n\n\n" ],
  %write_list(SSU),
  IC = ["constraint global_cardinality_low_up(incharge[",UPDOC,",..],[1],[" ,ICLO , "],[" , ICHI , "]);\n\n\n" ],
  %write_list(IC),
  OC = ["constraint global_cardinality_low_up(  oncall[",UPDOC,",..],[1],[" ,OCLO , "],[" , OCHI , "]);\n\n\n" ],
  %write_list(OC),
  (NOCONSECFLAG = 1 -&gt; CONSEQ = ["constraint no_consec_weekends(",UPDOC,");\n"] ; CONSEQ =[] ) ,
  (NOSPLITFLAG  = 1 -&gt; NOSPLIT= ["constraint no_split_weekend(",UPDOC,");\n"] ; NOSPLIT = []) ,
  FRI_PM = ["constraint assign_shifts(",UPDOC,",friday,p,",FPLO,",",FPHI,");\n"],
  SAT_AM = ["constraint assign_shifts(",UPDOC,",saturday,a,",SATAMLO,",",SATAMHI,");\n"],
  SAT_PM = ["constraint assign_shifts(",UPDOC,",saturday,p,",SATPMLO,",",SATPMHI,");\n"],

  SUN_AM = ["constraint assign_shifts(",UPDOC,",sunday,a,",SUNAMLO,",",SUNAMHI,");\n"],
  SUN_PM = ["constraint assign_shifts(",UPDOC,",sunday,p,",SUNPMLO,",",SUNPMHI,");\n"],

  
  R = [SSU,IC,OC,CONSEQ,NOSPLIT,FRI_PM,SAT_AM,SAT_PM,SUN_AM,SUN_PM,"\n\n"],
  flatten(R,RR),
  constants(DOCS,RESULT).
</div>

<div class="nb-cell program" data-background="true" data-below="true" data-singleline="true" name="p6">
write_constants([],[]).
write_constants([DOC|DOCS],[RESULT,SATAM,SATPM,SUNAM,SUNPM,SPLITSTR,CONSECSTR,FRIB4SAT|T2]):-
  upcase_atom(DOC,UDOC),
  constants(DOC,FLO,FHI,SALO,SAHI,SATPLO,SATPHI,SUNALO,SUNAHI,SUNPLO,SUNPHI,no_split-SPLIT,
            no_consec-CONSEC,no_fri_pm_before_sat-FBS),
  format(atom(RESULT),"constraint assign_shifts(~w,friday,p,~w,~w);",[UDOC,FLO,FHI]),
  format(atom(SATAM),"constraint assign_shifts(~w,saturday,a,~w,~w);",[UDOC,SALO,SAHI]),
  format(atom(SATPM),"constraint assign_shifts(~w,saturday,p,~w,~w);",[UDOC,SATPLO,SATPHI]),
  format(atom(SUNAM),"constraint assign_shifts(~w,sunday,a,~w,~w);",[UDOC,SUNALO,SUNAHI]),
  format(atom(SUNPM),"constraint assign_shifts(~w,sunday,p,~w,~w);",[UDOC,SUNPLO,SUNPHI]),
  (SPLIT  = 1 -&gt; format(atom(SPLITSTR),"constraint no_split_weekend(~w);\n\n",[UDOC]) ; 
                 format(atom(SPLITSTR),"% not for no_split_weekend ~w\n",[UDOC])),
  (CONSEC = 1 -&gt; format(atom(CONSECSTR),"constraint no_consec_weekends(~w);\n",[UDOC]) ; 
                 format(atom(CONSECSTR),"% not for no_consec_weekend ~w\n",[UDOC])),
  (FBS    = 1 -&gt; format(atom(FRIB4SAT),"constraint no_fri_pm_before_weekend(~w);\n",[UDOC]) ; 
                 format(atom(FRIB4SAT),"% not for no_fripm_before_sat ~w\n",[UDOC])),
  
    write_constants(DOCS,T2).
   

</div>

<div class="nb-cell html" name="htm1">

</div>

<div class="nb-cell query" name="q4">
docs(DOCS),write_constants(DOCS,R),maplist(writeln,R).

</div>

<div class="nb-cell query" name="q1">
docs(DOCS),enum(DOCS,ENUM),maplist(writeln,ENUM).
</div>

<div class="nb-cell program" data-background="true" data-below="true" data-singleline="true" name="p7">
runme:-
    docs(DOCS),
    enum(DOCS,ENUM),
    write_constants(DOCS,R),
    append(ENUM,R,RESULT),
    to_minizinc(ROSTER),
    flatten(ROSTER,ROSTER_RESULT),
    append(RESULT,ROSTER_RESULT,FINAL),
    maplist(writeln,FINAL).
    
</div>

<div class="nb-cell query" data-tabled="true" name="q3">
runme.
</div>

</div>
